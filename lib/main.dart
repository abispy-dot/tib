// =======================================================================
// FILE: lib/main.dart
// DESCRIPTION: The main entry point for the Flutter application.
// MODIFIED: No changes.
// =======================================================================
// Imports the core Flutter Material Design library, which contains widgets
// like MaterialApp, Scaffold, AppBar, etc.
import 'package:flutter/material.dart';
// Imports the core Firebase library, which is needed to initialize Firebase services.
import 'package:firebase_core/firebase_core.dart';
// Imports the Firebase Authentication library to handle user login state.
import 'package:firebase_auth/firebase_auth.dart';
// Imports the Provider package for state management.
import 'package:provider/provider.dart';
// Imports the custom Firestore service class, which handles database interactions.
import 'package:bahrain_tourism_app/services/firestore_service.dart';
// Imports the custom notification service class.
import 'package:bahrain_tourism_app/services/notification_service.dart';
// Imports the home screen widget, which is the main screen for logged-in users.
import 'package:bahrain_tourism_app/ui/screens/home_screen.dart';
// Imports the authentication screen for login/signup.
import 'package:bahrain_tourism_app/ui/screens/auth_screen.dart';
// Imports the Firebase configuration file generated by the FlutterFire CLI.
import 'package:bahrain_tourism_app/firebase_options.dart';

// The `main` function is the entry point of the application.
void main() async {
  // `async` is used because Firebase initialization is an asynchronous operation.

  // Ensures that the Flutter widget binding is initialized before any Flutter-specific
  // code is run. This is required for calling platform-specific code before `runApp`.
  WidgetsFlutterBinding.ensureInitialized();

  // Initializes the Firebase app using the platform-specific configuration
  // from `firebase_options.dart`. `await` pauses execution until this is complete.
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );

  // Initializes the custom notification service to set up push notifications.
  await NotificationService().initialize();

  // Runs the application by inflating the given widget and attaching it to the screen.
  runApp(const BahrainTourismApp());
}

// `BahrainTourismApp` is the root widget of the application.
// It's a `StatelessWidget` because its configuration doesn't change over time.
class BahrainTourismApp extends StatelessWidget {
  // The `const` constructor improves performance by allowing Flutter to cache this widget.
  const BahrainTourismApp({super.key});

  // The `build` method describes the part of the user interface represented by this widget.
  @override
  Widget build(BuildContext context) {
    // `MultiProvider` is a widget from the Provider package that makes multiple
    // services (providers) available to the entire widget tree below it.
    return MultiProvider(
      providers: [
        // This provider makes an instance of `FirestoreService` available to any
        // widget that needs it, without having to pass it down manually.
        Provider<FirestoreService>(create: (_) => FirestoreService()),
        
        // `StreamProvider` listens to a stream and exposes its latest value to descendants.
        // Here, it listens to Firebase's authentication state changes.
        // Any widget can now access the current user's status (logged in or out).
        StreamProvider<User?>.value(
          value: FirebaseAuth.instance.authStateChanges(),
          initialData: null, // The initial value before the stream emits its first event.
        ),
      ],
      // `MaterialApp` is the root widget for a Material Design application.
      // It sets up the app's theme, routing, and other foundational configurations.
      child: MaterialApp(
        title: 'Bahrain Tourism & Events',
        // `theme` defines the visual appearance of the application.
        theme: ThemeData(
          primarySwatch: Colors.red, // Sets the primary color palette.
          primaryColor: const Color(0xFFC8102E), // A specific shade of red for Bahrain.
          scaffoldBackgroundColor: Colors.grey[100], // A light grey background color.
          // Defines the default style for AppBars.
          appBarTheme: const AppBarTheme(
            backgroundColor: Color(0xFFC8102E),
            foregroundColor: Colors.white, // Text and icon color.
            elevation: 4,
          ),
          // Defines the default style for Card widgets.
          cardTheme: CardTheme(
            elevation: 2,
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(12),
            ),
          ),
        ),
        // `home` sets the default screen (or "route") of the app.
        // It points to `AuthWrapper`, which will decide which screen to show first.
        home: const AuthWrapper(),
      ),
    );
  }
}

// `AuthWrapper` is a simple widget that acts as a gatekeeper.
// It checks the user's authentication state and shows either the
// `HomeScreen` (if logged in) or the `AuthScreen` (if logged out).
class AuthWrapper extends StatelessWidget {
  const AuthWrapper({super.key});

  @override
  Widget build(BuildContext context) {
    // `context.watch<User?>()` gets the current user from the `StreamProvider`
    // and tells this widget to rebuild whenever the user's auth state changes.
    final firebaseUser = context.watch<User?>();

    // If `firebaseUser` is not null, it means a user is logged in.
    if (firebaseUser != null) {
      // So, we show the main content of the app.
      return const HomeScreen();
    }
    // Otherwise, the user is logged out.
    // So, we show the login/signup screen.
    return const AuthScreen();
  }
}
